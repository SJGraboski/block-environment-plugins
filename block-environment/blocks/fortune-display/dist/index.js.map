{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAQA,iBAAiB,GAAKC,EAAE,CAACC,MAAM,CAA/BF,iBAAiB;;AAEzB;AACA;AACA;AACA;AACA;AACA,IAAAG,GAAA,GAA+CF,EAAE;EAAvBG,gBAAgB,GAAAD,GAAA,CAAlCE,gBAAgB;;AAExB;AACA;AACA;AACA,IAAQC,iBAAiB,GAAKL,EAAE,CAACM,WAAW,CAApCD,iBAAiB;;AAEzB;AACA;AACA;AACA,IAAAE,cAAA,GAKIP,EAAE,CAACQ,UAAU;EAJbC,WAAW,GAAAF,cAAA,CAAXE,WAAW;EACXC,KAAK,GAAAH,cAAA,CAALG,KAAK;EACLC,QAAQ,GAAAJ,cAAA,CAARI,QAAQ;EACRC,SAAS,GAAAL,cAAA,CAATK,SAAS;;AAGb;AACA;AACA;AACA;AACAb,iBAAiB,CAAC,mCAAmC,EAAE;EACnDc,KAAK,EAAE,SAAS;EAChBC,QAAQ,EAAE,OAAO;EACjBC,UAAU,EAAE;IACRC,MAAM,EAAE;MACJC,IAAI,EAAE,QAAQ;MACd,WAAS;IACb;EACJ,CAAC;EACD;AACJ;AACA;EACIC,IAAI,EAAE,SAAAA,KAAAC,IAAA,EAAiC;IAAA,IAA/BJ,UAAU,GAAAI,IAAA,CAAVJ,UAAU;MAAEK,aAAa,GAAAD,IAAA,CAAbC,aAAa;IAC7B,OACIpB,EAAA,CAAAqB,OAAA,CAAAC,aAAA,cAKItB,EAAA,CAAAqB,OAAA,CAAAC,aAAA,CAACnB,gBAAgB;MACboB,KAAK,EAAC,mCAAmC;MACzCR,UAAU,EAAGA;IAAY,CAC5B,CAAC,EAKFf,EAAA,CAAAqB,OAAA,CAAAC,aAAA,CAACjB,iBAAiB,QACdL,EAAA,CAAAqB,OAAA,CAAAC,aAAA,CAACZ,KAAK,QACFV,EAAA,CAAAqB,OAAA,CAAAC,aAAA,CAACV,SAAS,QACNZ,EAAA,CAAAqB,OAAA,CAAAC,aAAA,CAACX,QAAQ,QAOLX,EAAA,CAAAqB,OAAA,CAAAC,aAAA,CAACb,WAAW;MACRe,KAAK,EAAC,QAAQ;MACdC,KAAK,EAAGV,UAAU,CAACC,MAAQ;MAC3BU,QAAQ,EAAG,SAAAA,SAACC,QAAQ;QAAA,OAAKP,aAAa,CAAE;UAAEJ,MAAM,EAAEW;QAAS,CAAE,CAAC;MAAA;IAAE,CACnE,CACK,CACH,CACR,CACQ,CAClB,CAAC;EAEd,CAAC;EACD;AACJ;AACA;EACIC,IAAI,EAAE,SAAAA,KAACC,KAAK;IAAA,OAAK,IAAI;EAAA;AACzB,CAAC,CAAC;;;;;;UC3FF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACqB","sources":["webpack:///./src/index.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///./backend.js"],"sourcesContent":["/* src/index.js\n * The JavaScript configuration file for the Fortune Display block.\n * This block will display a random fortune from the current site's\n * collection of fortune custom posts.\n * \n * This file includes the code we write for telling WordPress\n * how the block should behave in the Block Editor.\n * */\n\n// Grabs registerBlockType from wp.blocks (wp-blocks package, see presentation.php)\nconst { registerBlockType } = wp.blocks;\n\n/* Grabs the serverSideRender component from the wp object\n * and gives it the alias ServerSideRender (components should be uppercased).\n * This is useful for displaying blocks in the editor that we render with PHP.\n * (Part of the wp-server-side-render render package, see fortune-display.php.)\n * */\nconst { serverSideRender: ServerSideRender } = wp;\n\n/* Grabs the InspectorControls component rendering on the right-side panel in the Block Editor.\n * Part of wp.blockEditor (wp-block-editor package, see presentation.php)\n * */\nconst { InspectorControls } = wp.blockEditor;\n\n/* Grabs more components for laying out the block and manipulating attributes.\n * These are all part of wp.components (wp-components package, see presentation.php)\n * */\nconst {\n    TextControl,\n    Panel,\n    PanelRow,\n    PanelBody\n} = wp.components;\n\n/* This is where we register the block in our JavaScript.\n * Arg 1 is the name of the block. Generally 'plugin/block'.\n * Make sure you use the same name in your PHP file (see presentation.php)\n * */\nregisterBlockType('block-environment/fortune-display', {\n    title: 'Fortune',\n    category: 'theme',\n    attributes: {\n        prefix: {\n            type: 'string',\n            default: 'Fortune'\n        },\n    },\n    /* edit: this property handles how the block appears in the editor, \n     * and how the author will manipulate the block's attributes.\n     * */\n    edit: ({attributes, setAttributes}) => {\n        return (\n            <div>\n                {/* The ServerSideRender component displays the block in the editor\n                  * with the same html that will render on the front-end of WordPress.\n                  * It accomplishes this with a call to the server to render the block, hence the name.\n                  * */ }\n                <ServerSideRender\n                    block=\"block-environment/fortune-display\"\n                    attributes={ attributes }\n                />\n                {/* The InspectorControls component allows us to edit\n                  * what the right side of the Block Editor looks like\n                  * when the author select the block.\n                  * */}\n                <InspectorControls>\n                    <Panel>\n                        <PanelBody>\n                            <PanelRow>\n                                {/* TextControl is a component for grabbing a string of text from the author.\n                                  * The label property is the label that appears above the component's field.\n                                  * The value property is tied to the block's prefix attribute.\n                                  * The function specified in onChange fires whenever the user changes the value of the field.\n                                  * In this case, the function will set the block's prefix attribute to the newest value of the field.\n                                  * */ }\n                                <TextControl \n                                    label=\"Prefix\"  \n                                    value={ attributes.prefix }  \n                                    onChange={ (newValue) => setAttributes( { prefix: newValue } ) }\n                                />\n                            </PanelRow>\n                        </PanelBody>\n                    </Panel>\n                </InspectorControls>\n            </div>\n        )   \n    },\n    /* save: this property handles how the block appears on the front-end of WordPress.\n     * In this case, we return null, as we're rendering this block with PHP.\n     * */\n    save: (props) => null\n});","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* backend.js \n * Webpack will read the files you import\n * and use babel for transpiling your JSX and ES6 \n * into code that most browsers can read. \n * It will also process your SASS code into minified CSS.\n * */\nimport './src/index';\nimport './src/editor.scss';"],"names":["registerBlockType","wp","blocks","_wp","ServerSideRender","serverSideRender","InspectorControls","blockEditor","_wp$components","components","TextControl","Panel","PanelRow","PanelBody","title","category","attributes","prefix","type","edit","_ref","setAttributes","element","createElement","block","label","value","onChange","newValue","save","props"],"sourceRoot":""}